import { IconSymbol } from "@/components/ui/icon-symbol";
import { router, useLocalSearchParams } from "expo-router";
import { useState } from "react";
import {
    Alert,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";

interface ShopPoint {
    id: number;
    shortName: string;
    fullName: string;
    address: string;
    latitude: number;
    longitude: number;
    phone: string;
    workingHours: string;
    images: string[];
}

export default function PointDetailScreen() {
    const { id } = useLocalSearchParams<{ id: string }>();
    const pointId = Number(id);

    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const [isEditing, setIsEditing] = useState(false);

    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ö—É–∫–∞ –ø–æ id)
    const [point, setPoint] = useState<ShopPoint>({
        id: pointId,
        shortName: "–°–≤–µ–∂–µ—Å—Ç—å",
        fullName: "–°–≤–µ–∂–µ—Å—Ç—å –Ω–∞ –õ–µ–Ω–∏–Ω–∞",
        address: "—É–ª. –õ–µ–Ω–∏–Ω–∞, 45",
        latitude: 55.755819,
        longitude: 37.617644,
        phone: "+7 (495) 123-45-67",
        workingHours: "08:00 - 22:00",
        images: ['', '', '', ''], // 4 —Ñ–æ—Ç–æ - —Ü–≤–µ—Ç–∞ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    });

    const [hasChanges, setHasChanges] = useState(false);

    const handleEdit = () => {
        setIsEditing(true);
    };

    const handleCancel = () => {
        Alert.alert(
            "–û—Ç–º–µ–Ω–∞",
            "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
            [
                { text: "–ù–µ—Ç", style: "cancel" },
                {
                    text: "–î–∞",
                    style: "destructive",
                    onPress: () => {
                        setIsEditing(false);
                        setHasChanges(false);
                    }
                }
            ]
        );
    };

    const handleSave = () => {
        Alert.alert(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n(–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)",
            [{ 
                text: "OK",
                onPress: () => {
                    setIsEditing(false);
                    setHasChanges(false);
                }
            }]
        );
    };

    const handleDelete = () => {
        Alert.alert(
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏",
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${point.fullName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
            [
                { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
                {
                    text: "–£–¥–∞–ª–∏—Ç—å",
                    style: "destructive",
                    onPress: () => {
                        // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - API –∑–∞–ø—Ä–æ—Å)
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤
                        setTimeout(() => {
                            Alert.alert("–£—Å–ø–µ—Ö", "–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
                            router.back();
                        }, 100);
                    }
                }
            ]
        );
    };

    const handleAddImage = () => {
        if (!isEditing) return;
        
        Alert.alert(
            "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
            "–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≥–∞–ª–µ—Ä–µ—è",
            [
                { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
                {
                    text: "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    onPress: () => {
                        // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É - —Ü–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        setPoint({
                            ...point,
                            images: [...point.images, '']
                        });
                        setHasChanges(true);
                    }
                }
            ]
        );
    };

    const handleRemoveImage = (index: number) => {
        if (!isEditing) return;
        
        Alert.alert(
            "–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ?",
            [
                { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
                {
                    text: "–£–¥–∞–ª–∏—Ç—å",
                    style: "destructive",
                    onPress: () => {
                        setPoint({
                            ...point,
                            images: point.images.filter((_, i) => i !== index)
                        });
                        setHasChanges(true);
                    }
                }
            ]
        );
    };

    const handleFieldChange = <K extends keyof ShopPoint>(field: K, value: ShopPoint[K]) => {
        setPoint({ ...point, [field]: value });
        setHasChanges(true);
    };

    return (
        <SafeAreaView style={styles.safeArea} edges={['top']}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <View style={styles.header}>
                <TouchableOpacity 
                    style={styles.headerBackButton}
                    onPress={() => router.back()}
                >
                    <IconSymbol name="arrow.left" color="#333" size={24} />
                </TouchableOpacity>
                <Text style={styles.headerTitle} numberOfLines={1}>
                    {point.fullName}
                </Text>
                {!isEditing ? (
                    <TouchableOpacity 
                        style={styles.headerEditButton}
                        onPress={handleEdit}
                    >
                        <IconSymbol name="pencil" size={20} color="#007AFF" />
                    </TouchableOpacity>
                ) : (
                    <TouchableOpacity 
                        style={styles.headerCancelButton}
                        onPress={handleCancel}
                    >
                        <Text style={styles.headerCancelText}>–û—Ç–º–µ–Ω–∞</Text>
                    </TouchableOpacity>
                )}
            </View>

            <ScrollView 
                style={styles.scrollView}
                contentContainerStyle={styles.scrollContent}
                showsVerticalScrollIndicator={false}
                keyboardShouldPersistTaps="handled"
                keyboardDismissMode="on-drag"
            >
                {/* –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
                <View style={styles.gallerySection}>
                    <Text style={styles.sectionTitle}>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ—á–∫–∏</Text>
                    <ScrollView 
                        horizontal 
                        showsHorizontalScrollIndicator={false}
                        contentContainerStyle={styles.galleryScroll}
                    >
                        {point.images.map((imageUrl, index) => {
                            // –ú–∞—Å—Å–∏–≤ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
                            const colors = ['#81C784', '#64B5F6', '#FFB74D', '#BA68C8', '#F06292', '#4DD0E1', '#AED581', '#FFD54F'];
                            const backgroundColor = colors[index % colors.length];
                            
                            return (
                                <View key={index} style={styles.imageWrapper}>
                                    <View 
                                        style={[styles.galleryImage, { backgroundColor }]}
                                    >
                                        <Text style={styles.imagePlaceholderText}>üì∏</Text>
                                        <Text style={styles.imageNumberText}>–§–æ—Ç–æ {index + 1}</Text>
                                    </View>
                                    {isEditing && (
                                        <TouchableOpacity 
                                            style={styles.removeImageButton}
                                            onPress={() => handleRemoveImage(index)}
                                        >
                                            <IconSymbol name="trash" size={16} color="#fff" />
                                        </TouchableOpacity>
                                    )}
                                </View>
                            );
                        })}
                        
                        {isEditing && (
                            <TouchableOpacity 
                                style={styles.addImageButton}
                                onPress={handleAddImage}
                            >
                                <IconSymbol name="plus" size={32} color="#999" />
                                <Text style={styles.addImageText}>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</Text>
                            </TouchableOpacity>
                        )}
                    </ScrollView>
                </View>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ */}
                <View style={styles.infoSection}>
                    {/* –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ */}
                    <View style={styles.fieldContainer}>
                        <Text style={styles.label}>–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</Text>
                        {isEditing ? (
                            <TextInput
                                style={styles.input}
                                value={point.fullName}
                                onChangeText={(text) => handleFieldChange('fullName', text)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                            />
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>{point.fullName}</Text>
                            </View>
                        )}
                    </View>

                    {/* –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ */}
                    <View style={styles.fieldContainer}>
                        <Text style={styles.label}>–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</Text>
                        {isEditing ? (
                            <TextInput
                                style={styles.input}
                                value={point.shortName}
                                onChangeText={(text) => handleFieldChange('shortName', text)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                            />
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>{point.shortName}</Text>
                            </View>
                        )}
                    </View>

                    {/* –ê–¥—Ä–µ—Å */}
                    <View style={styles.fieldContainer}>
                        <Text style={styles.label}>–ê–¥—Ä–µ—Å</Text>
                        {isEditing ? (
                            <TextInput
                                style={styles.input}
                                value={point.address}
                                onChangeText={(text) => handleFieldChange('address', text)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
                            />
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>üìç {point.address}</Text>
                            </View>
                        )}
                    </View>

                    {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                    <View style={styles.fieldContainer}>
                        <Text style={styles.label}>–¢–µ–ª–µ—Ñ–æ–Ω</Text>
                        {isEditing ? (
                            <TextInput
                                style={styles.input}
                                value={point.phone}
                                onChangeText={(text) => handleFieldChange('phone', text)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω"
                                keyboardType="phone-pad"
                            />
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>üìû {point.phone}</Text>
                            </View>
                        )}
                    </View>

                    {/* –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã */}
                    <View style={styles.fieldContainer}>
                        <Text style={styles.label}>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</Text>
                        {isEditing ? (
                            <TextInput
                                style={styles.input}
                                value={point.workingHours}
                                onChangeText={(text) => handleFieldChange('workingHours', text)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã"
                            />
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>üïí {point.workingHours}</Text>
                            </View>
                        )}
                    </View>

                    {/* –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
                    <View style={styles.coordinatesSection}>
                        <Text style={styles.label}>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</Text>
                        {isEditing ? (
                            <View style={styles.coordinatesRow}>
                                <View style={styles.coordinateField}>
                                    <Text style={styles.coordinateLabel}>–®–∏—Ä–æ—Ç–∞</Text>
                                    <TextInput
                                        style={styles.input}
                                        value={point.latitude.toString()}
                                        onChangeText={(text) => handleFieldChange('latitude', parseFloat(text) || 0)}
                                        placeholder="–®–∏—Ä–æ—Ç–∞"
                                        keyboardType="decimal-pad"
                                    />
                                </View>
                                <View style={styles.coordinateField}>
                                    <Text style={styles.coordinateLabel}>–î–æ–ª–≥–æ—Ç–∞</Text>
                                    <TextInput
                                        style={styles.input}
                                        value={point.longitude.toString()}
                                        onChangeText={(text) => handleFieldChange('longitude', parseFloat(text) || 0)}
                                        placeholder="–î–æ–ª–≥–æ—Ç–∞"
                                        keyboardType="decimal-pad"
                                    />
                                </View>
                            </View>
                        ) : (
                            <View style={styles.valueContainer}>
                                <Text style={styles.valueText}>
                                    üåç {point.latitude.toFixed(6)}, {point.longitude.toFixed(6)}
                                </Text>
                            </View>
                        )}
                    </View>
                </View>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {isEditing && (
                    <View style={styles.actionsSection}>
                        <TouchableOpacity 
                            style={[
                                styles.saveButton,
                                !hasChanges && styles.saveButtonDisabled
                            ]}
                            onPress={handleSave}
                            disabled={!hasChanges}
                        >
                            <Text style={styles.saveButtonText}>
                                {hasChanges ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"}
                            </Text>
                        </TouchableOpacity>

                        {hasChanges && (
                            <View style={styles.changesIndicator}>
                                <Text style={styles.changesIndicatorText}>
                                    ‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                </Text>
                            </View>
                        )}

                        <TouchableOpacity 
                            style={styles.deleteButton}
                            onPress={handleDelete}
                        >
                            <IconSymbol name="trash" size={20} color="#fff" />
                            <Text style={styles.deleteButtonText}>–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É</Text>
                        </TouchableOpacity>
                    </View>
                )}
            </ScrollView>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    safeArea: {
        flex: 1,
        backgroundColor: '#f5f5f5',
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: 16,
        backgroundColor: '#fff',
        borderBottomWidth: 1,
        borderBottomColor: '#e0e0e0',
    },
    headerBackButton: {
        marginRight: 12,
    },
    headerTitle: {
        flex: 1,
        fontSize: 18,
        fontWeight: '600',
        color: '#333',
    },
    headerEditButton: {
        padding: 8,
        backgroundColor: '#E3F2FD',
        borderRadius: 8,
    },
    headerCancelButton: {
        padding: 8,
    },
    headerCancelText: {
        color: '#ff3b30',
        fontSize: 16,
        fontWeight: '600',
    },
    scrollView: {
        flex: 1,
    },
    scrollContent: {
        paddingBottom: 40,
    },
    gallerySection: {
        backgroundColor: '#fff',
        paddingVertical: 16,
        marginBottom: 8,
    },
    sectionTitle: {
        fontSize: 18,
        fontWeight: '600',
        color: '#333',
        paddingHorizontal: 16,
        marginBottom: 12,
    },
    galleryScroll: {
        paddingHorizontal: 16,
        gap: 12,
    },
    imageWrapper: {
        position: 'relative',
    },
    galleryImage: {
        width: 300,
        height: 200,
        borderRadius: 12,
        backgroundColor: '#f0f0f0',
        justifyContent: 'center',
        alignItems: 'center',
    },
    imagePlaceholderText: {
        fontSize: 48,
        marginBottom: 8,
    },
    imageNumberText: {
        fontSize: 16,
        color: '#fff',
        fontWeight: '600',
    },
    removeImageButton: {
        position: 'absolute',
        top: 8,
        right: 8,
        backgroundColor: 'rgba(255, 59, 48, 0.9)',
        borderRadius: 20,
        width: 32,
        height: 32,
        justifyContent: 'center',
        alignItems: 'center',
    },
    addImageButton: {
        width: 300,
        height: 200,
        borderRadius: 12,
        borderWidth: 2,
        borderColor: '#ddd',
        borderStyle: 'dashed',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#fafafa',
    },
    addImageText: {
        marginTop: 8,
        fontSize: 14,
        color: '#999',
    },
    infoSection: {
        backgroundColor: '#fff',
        padding: 16,
        marginBottom: 8,
    },
    fieldContainer: {
        marginBottom: 20,
    },
    label: {
        fontSize: 16,
        fontWeight: '600',
        marginBottom: 8,
        color: '#333',
    },
    input: {
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        padding: 12,
        fontSize: 16,
        backgroundColor: '#f9f9f9',
    },
    valueContainer: {
        backgroundColor: '#fff',
        borderRadius: 8,
        padding: 12,
        borderWidth: 1,
        borderColor: '#e0e0e0',
    },
    valueText: {
        fontSize: 16,
        color: '#333',
        lineHeight: 22,
    },
    coordinatesSection: {
        marginBottom: 20,
    },
    coordinatesRow: {
        flexDirection: 'row',
        gap: 12,
    },
    coordinateField: {
        flex: 1,
    },
    coordinateLabel: {
        fontSize: 14,
        color: '#666',
        marginBottom: 4,
    },
    actionsSection: {
        backgroundColor: '#fff',
        padding: 16,
    },
    saveButton: {
        backgroundColor: '#007AFF',
        borderRadius: 8,
        padding: 16,
        alignItems: 'center',
        marginBottom: 12,
    },
    saveButtonDisabled: {
        backgroundColor: '#ccc',
    },
    saveButtonText: {
        color: 'white',
        fontSize: 18,
        fontWeight: '600',
    },
    changesIndicator: {
        backgroundColor: '#FFF3CD',
        borderColor: '#FFC107',
        borderWidth: 1,
        borderRadius: 8,
        padding: 12,
        marginBottom: 12,
        alignItems: 'center',
    },
    changesIndicatorText: {
        color: '#856404',
        fontSize: 14,
        fontWeight: '600',
    },
    deleteButton: {
        flexDirection: 'row',
        backgroundColor: '#ff3b30',
        borderRadius: 8,
        padding: 16,
        alignItems: 'center',
        justifyContent: 'center',
        gap: 8,
    },
    deleteButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '600',
    },
});

