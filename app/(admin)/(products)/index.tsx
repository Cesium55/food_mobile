import { TabScreen } from "@/components/TabScreen";
import { IconSymbol } from "@/components/ui/icon-symbol";
import { useCategories } from "@/hooks/useCategories";
import { router } from "expo-router";
import { useState } from "react";
import {
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View
} from "react-native";

interface Product {
    id: number;
    name: string;
    description: string;
    categoryId: number;
}

export default function ProductsScreen() {
    const { categories, getCategoryById } = useCategories();
    const [searchQuery, setSearchQuery] = useState("");
    const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null);

    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    const [products] = useState<Product[]>([
        // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        { id: 1, name: "–ú–æ–ª–æ–∫–æ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ 3.2%", description: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –∫–æ—Ä–æ–≤—å–µ –º–æ–ª–æ–∫–æ", categoryId: 11 },
        { id: 2, name: "–ú–æ–ª–æ–∫–æ —É–ª—å—Ç—Ä–∞–ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ 2.5%", description: "–î–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è", categoryId: 11 },
        { id: 3, name: "–ö–µ—Ñ–∏—Ä 2.5%", description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫", categoryId: 12 },
        { id: 4, name: "–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π", description: "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ –∏ —Å–∞—Ö–∞—Ä–∞", categoryId: 12 },
        { id: 5, name: "–¢–≤–æ—Ä–æ–≥ 5%", description: "–ó–µ—Ä–Ω–µ–Ω—ã–π —Ç–≤–æ—Ä–æ–≥", categoryId: 13 },
        { id: 6, name: "–°—ã—Ä–∫–∏ –≥–ª–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", description: "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –º–∞—Å—Å–∞ –≤ —à–æ–∫–æ–ª–∞–¥–µ", categoryId: 13 },
        { id: 7, name: "–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π", description: "–¢–≤–µ—Ä–¥—ã–π —Å—ã—Ä", categoryId: 14 },
        { id: 8, name: "–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω", description: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ç–≤–µ—Ä–¥—ã–π —Å—ã—Ä", categoryId: 14 },
        { id: 9, name: "–°–º–µ—Ç–∞–Ω–∞ 20%", description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–º–µ—Ç–∞–Ω–∞", categoryId: 15 },
        { id: 10, name: "–ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ 82.5%", description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ", categoryId: 16 },
        
        // –•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞
        { id: 11, name: "–•–ª–µ–± –ë–æ—Ä–æ–¥–∏–Ω—Å–∫–∏–π", description: "–†–∂–∞–Ω–æ–π —Ö–ª–µ–±", categoryId: 41 },
        { id: 12, name: "–•–ª–µ–± –±–µ–ª—ã–π", description: "–ü—à–µ–Ω–∏—á–Ω—ã–π —Ö–ª–µ–±", categoryId: 41 },
        { id: 13, name: "–ö—Ä—É–∞—Å—Å–∞–Ω —Å —à–æ–∫–æ–ª–∞–¥–æ–º", description: "–°–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞", categoryId: 42 },
        { id: 14, name: "–ë—É–ª–æ—á–∫–∞ —Å –º–∞–∫–æ–º", description: "–°–¥–æ–±–Ω–∞—è –±—É–ª–æ—á–∫–∞", categoryId: 42 },
        
        // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
        { id: 15, name: "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ", description: "–û—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ", categoryId: 23 },
        { id: 16, name: "–§–∞—Ä—à –≥–æ–≤—è–∂–∏–π", description: "–°–≤–µ–∂–∏–π —Ñ–∞—Ä—à", categoryId: 24 },
        { id: 17, name: "–ö–æ–ª–±–∞—Å–∞ –î–æ–∫—Ç–æ—Ä—Å–∫–∞—è", description: "–í–∞—Ä–µ–Ω–∞—è –∫–æ–ª–±–∞—Å–∞", categoryId: 25 },
        
        // –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã
        { id: 18, name: "–ü–æ–º–∏–¥–æ—Ä—ã", description: "–°–≤–µ–∂–∏–µ —Ç–æ–º–∞—Ç—ã", categoryId: 31 },
        { id: 19, name: "–û–≥—É—Ä—Ü—ã", description: "–°–≤–µ–∂–∏–µ –æ–≥—É—Ä—Ü—ã", categoryId: 31 },
        { id: 20, name: "–Ø–±–ª–æ–∫–∏ –ì–æ–ª–¥–µ–Ω", description: "–ò–º–ø–æ—Ä—Ç–Ω—ã–µ —è–±–ª–æ–∫–∏", categoryId: 32 },
    ]);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const getCategoryIcon = (categoryId: number): string => {
        const category = getCategoryById(categoryId);
        if (!category) return 'üì¶';
        
        const parentId = category.parent_category_id || categoryId;
        const icons: { [key: number]: string } = {
            1: 'ü•õ', 2: 'ü•©', 3: 'ü•ó', 4: 'üçû',
            5: 'ü•§', 6: 'üåæ', 7: '‚ùÑÔ∏è', 8: 'üç∞',
        };
        return icons[parentId] || 'üì¶';
    };

    const filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                            product.description.toLowerCase().includes(searchQuery.toLowerCase());
        const matchesCategory = selectedCategoryId === null || product.categoryId === selectedCategoryId;
        return matchesSearch && matchesCategory;
    });

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groupedProducts = filteredProducts.reduce((acc, product) => {
        if (!acc[product.categoryId]) {
            acc[product.categoryId] = [];
        }
        acc[product.categoryId].push(product);
        return acc;
    }, {} as { [key: number]: Product[] });

    const handleProductPress = (productId: number) => {
        router.push(`/(admin)/(products)/${productId}`);
    };

    const handleAddProduct = () => {
        router.push('/(admin)/(products)/new');
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ç–æ–≤–∞—Ä—ã
    const categoriesWithProducts = Object.keys(groupedProducts).map(Number);

    return (
        <TabScreen title="–¢–æ–≤–∞—Ä—ã">
            <View style={styles.container}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                <View style={styles.header}>
                    <Text style={styles.headerTitle}>
                        –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
                    </Text>
                    <TouchableOpacity 
                        style={styles.addButton}
                        onPress={handleAddProduct}
                    >
                        <IconSymbol name="plus" size={20} color="#fff" />
                        <Text style={styles.addButtonText}>–î–æ–±–∞–≤–∏—Ç—å</Text>
                    </TouchableOpacity>
                </View>

                {/* –ü–æ–∏—Å–∫ */}
                <View style={styles.searchContainer}>
                    <IconSymbol name="search" size={20} color="#666" />
                    <TextInput
                        style={styles.searchInput}
                        placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                        value={searchQuery}
                        onChangeText={setSearchQuery}
                    />
                    {searchQuery.length > 0 && (
                        <TouchableOpacity onPress={() => setSearchQuery('')}>
                            <IconSymbol name="xmark" size={20} color="#666" />
                        </TouchableOpacity>
                    )}
                </View>

                {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                <ScrollView 
                    contentContainerStyle={styles.scrollContent}
                    showsVerticalScrollIndicator={false}
                >
                    <Text style={styles.countText}>
                        –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {filteredProducts.length}
                    </Text>

                    {categoriesWithProducts.length === 0 ? (
                        <View style={styles.emptyContainer}>
                            <Text style={styles.emptyIcon}>üì¶</Text>
                            <Text style={styles.emptyText}>
                                {searchQuery ? "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"}
                            </Text>
                            <Text style={styles.emptySubtext}>
                                {searchQuery ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" : "–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä"}
                            </Text>
                        </View>
                    ) : (
                        categoriesWithProducts.map(categoryId => {
                            const category = getCategoryById(categoryId);
                            if (!category) return null;

                            return (
                                <View key={categoryId} style={styles.categorySection}>
                                    <View style={styles.categoryHeader}>
                                        <Text style={styles.categoryIcon}>{getCategoryIcon(categoryId)}</Text>
                                        <Text style={styles.categoryName}>{category.name}</Text>
                                        <Text style={styles.categoryCount}>
                                            {groupedProducts[categoryId].length}
                                        </Text>
                                    </View>

                                    {groupedProducts[categoryId].map(product => (
                                        <TouchableOpacity
                                            key={product.id}
                                            style={styles.productCard}
                                            activeOpacity={0.7}
                                            onPress={() => handleProductPress(product.id)}
                                        >
                                            <View style={styles.productIcon}>
                                                <Text style={styles.productIconText}>
                                                    {getCategoryIcon(categoryId)}
                                                </Text>
                                            </View>
                                            
                                            <View style={styles.productInfo}>
                                                <Text style={styles.productName}>{product.name}</Text>
                                                <Text style={styles.productDescription} numberOfLines={1}>
                                                    {product.description}
                                                </Text>
                                            </View>

                                            <IconSymbol name="chevron.right" color="#999" size={20} />
                                        </TouchableOpacity>
                                    ))}
                                </View>
                            );
                        })
                    )}
                </ScrollView>
            </View>
        </TabScreen>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 16,
        paddingBottom: 12,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    headerTitle: {
        fontSize: 18,
        fontWeight: '600',
        color: '#333',
        flex: 1,
    },
    addButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#34C759',
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 8,
        gap: 6,
    },
    addButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '600',
    },
    searchContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#f5f5f5',
        borderRadius: 10,
        paddingHorizontal: 12,
        paddingVertical: 8,
        margin: 16,
        marginBottom: 8,
        gap: 8,
    },
    searchInput: {
        flex: 1,
        fontSize: 16,
        color: '#333',
    },
    scrollContent: {
        padding: 16,
        paddingTop: 8,
        paddingBottom: 40,
    },
    countText: {
        fontSize: 14,
        color: '#666',
        marginBottom: 16,
        fontStyle: 'italic',
    },
    categorySection: {
        marginBottom: 24,
    },
    categoryHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 8,
        paddingHorizontal: 12,
        backgroundColor: '#f8f8f8',
        borderRadius: 8,
        marginBottom: 8,
    },
    categoryIcon: {
        fontSize: 24,
        marginRight: 8,
    },
    categoryName: {
        flex: 1,
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
    },
    categoryCount: {
        fontSize: 14,
        color: '#666',
        backgroundColor: '#e0e0e0',
        paddingHorizontal: 8,
        paddingVertical: 2,
        borderRadius: 12,
    },
    productCard: {
        flexDirection: 'row',
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 12,
        marginBottom: 8,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
        elevation: 2,
        alignItems: 'center',
    },
    productIcon: {
        width: 50,
        height: 50,
        borderRadius: 25,
        backgroundColor: '#f0f0f0',
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 12,
    },
    productIconText: {
        fontSize: 24,
    },
    productInfo: {
        flex: 1,
        justifyContent: 'center',
    },
    productName: {
        fontSize: 16,
        fontWeight: '600',
        color: '#333',
        marginBottom: 2,
    },
    productDescription: {
        fontSize: 14,
        color: '#666',
    },
    emptyContainer: {
        alignItems: 'center',
        paddingVertical: 60,
    },
    emptyIcon: {
        fontSize: 64,
        marginBottom: 16,
    },
    emptyText: {
        fontSize: 18,
        fontWeight: '600',
        color: '#666',
        marginBottom: 8,
    },
    emptySubtext: {
        fontSize: 14,
        color: '#999',
        textAlign: 'center',
        paddingHorizontal: 40,
    },
});
