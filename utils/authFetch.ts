/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */

import { API_ENDPOINTS, HTTP_METHODS, HTTP_STATUS } from '@/constants/api';
import { env } from '@/constants/env';
import { clearTokens, getTokens, saveTokens } from './storage';

export interface AuthFetchOptions extends RequestInit {
  /**
   * –ù—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   * @default true
   */
  requireAuth?: boolean;

  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @default 1
   */
  maxRetries?: number;

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @default true
   */
  clearTokensOnError?: boolean;
}

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö refresh –∑–∞–ø—Ä–æ—Å–æ–≤
let isRefreshing = false;
let refreshPromise: Promise<{ success: boolean; accessToken?: string | null }> | null = null;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç access —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
async function getAccessToken(): Promise<string | null> {
  const { accessToken } = await getTokens();
  return accessToken;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç refresh —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
async function getRefreshToken(): Promise<string | null> {
  const { refreshToken } = await getTokens();
  return refreshToken;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ refresh —Ç–æ–∫–µ–Ω
 */
async function refreshAccessToken(): Promise<{ success: boolean; accessToken?: string | null }> {
  // –ï—Å–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–∏—Å
  if (isRefreshing && refreshPromise) {
    return refreshPromise;
  }

  isRefreshing = true;
  refreshPromise = (async () => {
    try {
      const refreshToken = await getRefreshToken();

      if (!refreshToken) {
        console.error('‚ùå Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await clearTokens();
        return { success: false, accessToken: null };
      }

      const url = `${env.API_BASE_URL}${API_ENDPOINTS.AUTH.REFRESH}`;

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), env.API_TIMEOUT);

      const response = await fetch(url, {
        method: HTTP_METHODS.POST,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          refresh_token: refreshToken,
        }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (response.status === HTTP_STATUS.OK) {
        const responseData = await response.json();

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data: {access_token, refresh_token}}
        if (responseData.data && responseData.data.access_token && responseData.data.refresh_token) {
          await saveTokens(responseData.data.access_token, responseData.data.refresh_token);
          console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
          return { success: true, accessToken: responseData.data.access_token };
        }
      }

      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
      await clearTokens();
      return { success: false, accessToken: null };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      await clearTokens();
      return { success: false, accessToken: null };
    } finally {
      isRefreshing = false;
      refreshPromise = null;
    }
  })();

  return refreshPromise;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
function createAuthHeaders(
  customHeaders?: HeadersInit,
  accessToken?: string | null
): HeadersInit {
  const headers = new Headers(customHeaders);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!headers.has('Content-Type')) {
    headers.set('Content-Type', 'application/json');
  }
  if (!headers.has('Accept')) {
    headers.set('Accept', 'application/json');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (accessToken) {
    headers.set('Authorization', `Bearer ${accessToken}`);
  }

  return headers;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
 * 
 * @param url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (extends RequestInit)
 * @returns Promise<Response>
 * 
 * @example
 * // GET –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * const response = await authFetch('/api/products', { method: 'GET' });
 * const data = await response.json();
 * 
 * @example
 * // POST –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–ª–æ–º
 * const response = await authFetch('/api/cart/add', {
 *   method: 'POST',
 *   body: JSON.stringify({ productId: 1, quantity: 2 })
 * });
 * 
 * @example
 * // –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * const response = await authFetch('/api/public/data', {
 *   method: 'GET',
 *   requireAuth: false
 * });
 */
export async function authFetch(
  url: string | URL,
  options: AuthFetchOptions = {}
): Promise<Response> {
  const {
    requireAuth = true,
    maxRetries = 1,
    clearTokensOnError = true,
    headers: customHeaders,
    ...fetchOptions
  } = options;

  let accessToken: string | null = null;
  let retryCount = 0;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (requireAuth) {
      accessToken = await getAccessToken();

      if (!accessToken) {
        console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = createAuthHeaders(customHeaders, accessToken);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), env.API_TIMEOUT);

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(url, {
        ...fetchOptions,
        headers,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response.ok) {
        return response;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
      if (response.status === HTTP_STATUS.UNAUTHORIZED && requireAuth && retryCount < maxRetries) {
        console.log('üîÑ –ü–æ–ª—É—á–µ–Ω 401, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        const refreshResult = await refreshAccessToken();

        if (refreshResult.success && refreshResult.accessToken) {
          retryCount++;

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º');

          const newHeaders = createAuthHeaders(customHeaders, refreshResult.accessToken);
          const newController = new AbortController();
          const newTimeoutId = setTimeout(() => newController.abort(), env.API_TIMEOUT);

          try {
            const retryResponse = await fetch(url, {
              ...fetchOptions,
              headers: newHeaders,
              signal: newController.signal,
            });

            clearTimeout(newTimeoutId);
            return retryResponse;

          } catch (retryError) {
            clearTimeout(newTimeoutId);
            throw retryError;
          }
        } else {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');

          if (clearTokensOnError) {
            await clearTokens();
            console.log('üßπ –¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã');
          }

          return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π 401 –æ—Ç–≤–µ—Ç
        }
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
      return response;

    } catch (fetchError) {
      clearTimeout(timeoutId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        throw new Error('Request timeout');
      }

      throw fetchError;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ authFetch:', error);
    throw error;
  }
}
