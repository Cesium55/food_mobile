/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
 */

export interface FieldError {
  field: string;
  message: string;
}

export interface ApiError {
  message: string;
  fieldErrors?: FieldError[];
  code?: number;
}

export interface AuthResponse {
  access_token: string;
  refresh_token: string;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export const processAuthResponse = (response: any): {
  success: boolean;
  data?: AuthResponse;
  error?: ApiError;
} => {
  const status = response.status;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç Processing auth response:', {
    status,
    data: response.data,
    dataType: typeof response.data,
    dataKeys: response.data ? Object.keys(response.data) : null,
  });
  
  // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (200-299)
  if (status >= 200 && status < 300) {
    const data = response.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    if (data && data.access_token && data.refresh_token) {
      console.log('‚úÖ Found tokens in data.access_token/data.refresh_token');
      return {
        success: true,
        data: {
          access_token: data.access_token,
          refresh_token: data.refresh_token,
        },
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ data.data
    if (data && data.data && data.data.access_token && data.data.refresh_token) {
      console.log('‚úÖ Found tokens in data.data.access_token/data.data.refresh_token');
      return {
        success: true,
        data: {
          access_token: data.data.access_token,
          refresh_token: data.data.refresh_token,
        },
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
    if (data && data.token && data.refreshToken) {
      console.log('‚úÖ Found tokens in data.token/data.refreshToken');
      return {
        success: true,
        data: {
          access_token: data.token,
          refresh_token: data.refreshToken,
        },
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    if (data && data.accessToken && data.refreshToken) {
      console.log('‚úÖ Found tokens in data.accessToken/data.refreshToken');
      return {
        success: true,
        data: {
          access_token: data.accessToken,
          refresh_token: data.refreshToken,
        },
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    if (data && data.access_token && data.refreshToken) {
      console.log('‚úÖ Found tokens in data.access_token/data.refreshToken');
      return {
        success: true,
        data: {
          access_token: data.access_token,
          refresh_token: data.refreshToken,
        },
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
    if (data && data.token && data.refresh_token) {
      console.log('‚úÖ Found tokens in data.token/data.refresh_token');
      return {
        success: true,
        data: {
          access_token: data.token,
          refresh_token: data.refresh_token,
        },
      };
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('‚ùå No tokens found in response:', {
      data,
      availableKeys: data ? Object.keys(data) : null,
    });
    
    return {
      success: false,
      error: {
        message: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–∂–∏–¥–∞–ª–∏—Å—å access_token –∏ refresh_token, –ø–æ–ª—É—á–µ–Ω–æ: ${JSON.stringify(data)}`,
        code: status,
      },
    };
  }
  
  // –û—à–∏–±–∫–∞ 400 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
  if (status === 400) {
    return {
      success: false,
      error: {
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        code: status,
      },
    };
  }
  
  // –û—à–∏–±–∫–∞ 401 - –Ω–µ–≤–µ—Ä–Ω—ã–π email/–ø–∞—Ä–æ–ª—å (–¥–ª—è –ª–æ–≥–∏–Ω–∞)
  if (status === 401) {
    return {
      success: false,
      error: {
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        code: status,
      },
    };
  }
  
  // –û—à–∏–±–∫–∞ 422 - –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FastAPI
  if (status === 422) {
    const data = response.data;
    const fieldErrors: FieldError[] = [];
    
    if (data && data.detail && Array.isArray(data.detail)) {
      data.detail.forEach((error: any) => {
        if (error.loc && error.loc.length > 1) {
          const field = error.loc[1]; // –ü–æ–ª–µ –∏–∑ FastAPI –æ—à–∏–±–∫–∏
          fieldErrors.push({
            field: field,
            message: error.msg || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
          });
        }
      });
    }
    
    return {
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        fieldErrors: fieldErrors,
        code: status,
      },
    };
  }
  
  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
  return {
    success: false,
    error: {
      message: response.data?.message || response.statusText || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      code: status,
    },
  };
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
 */
export const getFieldError = (fieldErrors: FieldError[] | undefined, fieldName: string): string | null => {
  if (!fieldErrors) return null;
  
  const fieldError = fieldErrors.find(error => error.field === fieldName);
  return fieldError ? fieldError.message : null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –æ—à–∏–±–∫—É (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–ª—è–º–∏)
 */
export const getGeneralError = (fieldErrors: FieldError[] | undefined): string | null => {
  if (!fieldErrors || fieldErrors.length === 0) return null;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø–æ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π';
};
